Terminals unused in grammar

   comment_une
   comment_plsr
   Guillemets


State 10 conflicts: 1 shift/reduce
State 68 conflicts: 6 reduce/reduce
State 113 conflicts: 4 shift/reduce


Grammar

    0 $accept: DEBUT $end

    1 DEBUT: MainPrgm idf pnt_virgul var DECLARATION BeginPg accolade_ouvr INSTRUCTIONS accolade_ferm EndPg pnt_virgul

    2 DECLARATION: let VARIABLE1 deux_pnts TYPE1 pnt_virgul
    3            | let idf deux_pnts TYPE2 pnt_virgul
    4            | constante idf deux_pnts TYPE1 egal VALEUR

    5 VALEUR: entier_pos
    6       | entier_neg
    7       | reel_pos
    8       | reel_neg

    9 VARIABLE1: idf virgul VARIABLE1
   10          | idf

   11 TYPE1: reel
   12      | entier

   13 TYPE2: corechet_ouvr TYPE1 pnt_virgul entier_pos corechet_ferm pnt_virgul

   14 INSTRUCTIONS: /* empty */
   15             | idf AFFECTATION_NOR INSTRUCTIONS
   16             | idf AFFECTATION_TAB INSTRUCTIONS
   17             | INPUT INSTRUCTIONS
   18             | OUTPUT INSTRUCTIONS
   19             | CONDITION INSTRUCTIONS
   20             | LOOP_DO INSTRUCTIONS
   21             | LOOP_FOR INSTRUCTIONS

   22 AFFECTATION_TAB: corechet_ouvr entier_pos corechet_ferm AFFECTATION_NOR

   23 AFFECTATION_NOR: affect EXPRESSION pnt_virgul

   24 EXPRESSION: parenthese_ouvr EXPRESSION parenthese_ferm
   25           | EXPRESSION OPERATEUR_ARITHM EXPRESSION
   26           | OPERAND
   27           | VALEUR

   28 OPERAND: idf
   29        | VALEUR
   30        | neg OPERAND

   31 OPERATEUR_ARITHM: add
   32                 | soustract
   33                 | division
   34                 | multipl

   35 INPUT: lire parenthese_ouvr idf parenthese_ferm pnt_virgul

   36 OUTPUT: output parenthese_ouvr DANS_OUTPUT parenthese_ferm pnt_virgul

   37 DANS_OUTPUT: chaine
   38            | idf
   39            | chaine virgul DANS_OUTPUT
   40            | idf virgul DANS_OUTPUT

   41 CONDITION: if_cond parenthese_ouvr EXPRESSION_COND parenthese_ferm then accolade_ouvr INSTRUCTIONS accolade_ferm SINON

   42 SINON: else_cond accolade_ouvr INSTRUCTIONS accolade_ferm
   43      | /* empty */

   44 EXPRESSION_COND: OPERAND OPERATEUR_COND OPERAND
   45                | EXPRESSION_COND and EXPRESSION_COND
   46                | EXPRESSION_COND or EXPRESSION_COND

   47 OPERATEUR_COND: inf
   48               | sup
   49               | inf_ou_egal
   50               | sup_ou_egal
   51               | identiq
   52               | diff

   53 LOOP_DO: boucle_do accolade_ouvr INSTRUCTIONS accolade_ferm boucle_while parenthese_ouvr EXPRESSION_COND parenthese_ferm pnt_virgul

   54 LOOP_FOR: boucle_for idf from entier_pos to entier_pos step entier_pos accolade_ouvr INSTRUCTIONS accolade_ferm


Terminals, with rules where they appear

$end (0) 0
error (256)
MainPrgm (258) 1
idf (259) 1 3 4 9 10 15 16 28 35 38 40 54
pnt_virgul (260) 1 2 3 13 23 35 36 53
var (261) 1
BeginPg (262) 1
accolade_ouvr (263) 1 41 42 53 54
accolade_ferm (264) 1 41 42 53 54
EndPg (265) 1
let (266) 2 3
deux_pnts (267) 2 3 4
constante (268) 4
egal (269) 4
virgul (270) 9 39 40
reel (271) 11
entier (272) 12
entier_pos (273) 5 13 22 54
corechet_ouvr (274) 13 22
corechet_ferm (275) 13 22
entier_neg (276) 6
reel_pos (277) 7
reel_neg (278) 8
affect (279) 23
chaine (280) 37 39
if_cond (281) 41
then (282) 41
parenthese_ferm (283) 24 35 36 41 53
parenthese_ouvr (284) 24 35 36 41 53
lire (285) 35
output (286) 36
add (287) 31
soustract (288) 32
division (289) 33
multipl (290) 34
inf (291) 47
sup (292) 48
inf_ou_egal (293) 49
sup_ou_egal (294) 50
neg (295) 30
and (296) 45
or (297) 46
diff (298) 52
boucle_for (299) 54
from (300) 54
to (301) 54
step (302) 54
boucle_do (303) 53
boucle_while (304) 53
comment_une (305)
comment_plsr (306)
else_cond (307) 42
identiq (308) 51
Guillemets (309)


Nonterminals, with rules where they appear

$accept (55)
    on left: 0
DEBUT (56)
    on left: 1, on right: 0
DECLARATION (57)
    on left: 2 3 4, on right: 1
VALEUR (58)
    on left: 5 6 7 8, on right: 4 27 29
VARIABLE1 (59)
    on left: 9 10, on right: 2 9
TYPE1 (60)
    on left: 11 12, on right: 2 4 13
TYPE2 (61)
    on left: 13, on right: 3
INSTRUCTIONS (62)
    on left: 14 15 16 17 18 19 20 21, on right: 1 15 16 17 18 19 20
    21 41 42 53 54
AFFECTATION_TAB (63)
    on left: 22, on right: 16
AFFECTATION_NOR (64)
    on left: 23, on right: 15 22
EXPRESSION (65)
    on left: 24 25 26 27, on right: 23 24 25
OPERAND (66)
    on left: 28 29 30, on right: 26 30 44
OPERATEUR_ARITHM (67)
    on left: 31 32 33 34, on right: 25
INPUT (68)
    on left: 35, on right: 17
OUTPUT (69)
    on left: 36, on right: 18
DANS_OUTPUT (70)
    on left: 37 38 39 40, on right: 36 39 40
CONDITION (71)
    on left: 41, on right: 19
SINON (72)
    on left: 42 43, on right: 41
EXPRESSION_COND (73)
    on left: 44 45 46, on right: 41 45 46 53
OPERATEUR_COND (74)
    on left: 47 48 49 50 51 52, on right: 44
LOOP_DO (75)
    on left: 53, on right: 20
LOOP_FOR (76)
    on left: 54, on right: 21


state 0

    0 $accept: . DEBUT $end

    MainPrgm  shift, and go to state 1

    DEBUT  go to state 2


state 1

    1 DEBUT: MainPrgm . idf pnt_virgul var DECLARATION BeginPg accolade_ouvr INSTRUCTIONS accolade_ferm EndPg pnt_virgul

    idf  shift, and go to state 3


state 2

    0 $accept: DEBUT . $end

    $end  shift, and go to state 4


state 3

    1 DEBUT: MainPrgm idf . pnt_virgul var DECLARATION BeginPg accolade_ouvr INSTRUCTIONS accolade_ferm EndPg pnt_virgul

    pnt_virgul  shift, and go to state 5


state 4

    0 $accept: DEBUT $end .

    $default  accept


state 5

    1 DEBUT: MainPrgm idf pnt_virgul . var DECLARATION BeginPg accolade_ouvr INSTRUCTIONS accolade_ferm EndPg pnt_virgul

    var  shift, and go to state 6


state 6

    1 DEBUT: MainPrgm idf pnt_virgul var . DECLARATION BeginPg accolade_ouvr INSTRUCTIONS accolade_ferm EndPg pnt_virgul

    let        shift, and go to state 7
    constante  shift, and go to state 8

    DECLARATION  go to state 9


state 7

    2 DECLARATION: let . VARIABLE1 deux_pnts TYPE1 pnt_virgul
    3            | let . idf deux_pnts TYPE2 pnt_virgul

    idf  shift, and go to state 10

    VARIABLE1  go to state 11


state 8

    4 DECLARATION: constante . idf deux_pnts TYPE1 egal VALEUR

    idf  shift, and go to state 12


state 9

    1 DEBUT: MainPrgm idf pnt_virgul var DECLARATION . BeginPg accolade_ouvr INSTRUCTIONS accolade_ferm EndPg pnt_virgul

    BeginPg  shift, and go to state 13


state 10

    3 DECLARATION: let idf . deux_pnts TYPE2 pnt_virgul
    9 VARIABLE1: idf . virgul VARIABLE1
   10          | idf .

    deux_pnts  shift, and go to state 14
    virgul     shift, and go to state 15

    deux_pnts  [reduce using rule 10 (VARIABLE1)]


state 11

    2 DECLARATION: let VARIABLE1 . deux_pnts TYPE1 pnt_virgul

    deux_pnts  shift, and go to state 16


state 12

    4 DECLARATION: constante idf . deux_pnts TYPE1 egal VALEUR

    deux_pnts  shift, and go to state 17


state 13

    1 DEBUT: MainPrgm idf pnt_virgul var DECLARATION BeginPg . accolade_ouvr INSTRUCTIONS accolade_ferm EndPg pnt_virgul

    accolade_ouvr  shift, and go to state 18


state 14

    3 DECLARATION: let idf deux_pnts . TYPE2 pnt_virgul

    corechet_ouvr  shift, and go to state 19

    TYPE2  go to state 20


state 15

    9 VARIABLE1: idf virgul . VARIABLE1

    idf  shift, and go to state 21

    VARIABLE1  go to state 22


state 16

    2 DECLARATION: let VARIABLE1 deux_pnts . TYPE1 pnt_virgul

    reel    shift, and go to state 23
    entier  shift, and go to state 24

    TYPE1  go to state 25


state 17

    4 DECLARATION: constante idf deux_pnts . TYPE1 egal VALEUR

    reel    shift, and go to state 23
    entier  shift, and go to state 24

    TYPE1  go to state 26


state 18

    1 DEBUT: MainPrgm idf pnt_virgul var DECLARATION BeginPg accolade_ouvr . INSTRUCTIONS accolade_ferm EndPg pnt_virgul

    idf         shift, and go to state 27
    if_cond     shift, and go to state 28
    lire        shift, and go to state 29
    output      shift, and go to state 30
    boucle_for  shift, and go to state 31
    boucle_do   shift, and go to state 32

    $default  reduce using rule 14 (INSTRUCTIONS)

    INSTRUCTIONS  go to state 33
    INPUT         go to state 34
    OUTPUT        go to state 35
    CONDITION     go to state 36
    LOOP_DO       go to state 37
    LOOP_FOR      go to state 38


state 19

   13 TYPE2: corechet_ouvr . TYPE1 pnt_virgul entier_pos corechet_ferm pnt_virgul

    reel    shift, and go to state 23
    entier  shift, and go to state 24

    TYPE1  go to state 39


state 20

    3 DECLARATION: let idf deux_pnts TYPE2 . pnt_virgul

    pnt_virgul  shift, and go to state 40


state 21

    9 VARIABLE1: idf . virgul VARIABLE1
   10          | idf .

    virgul  shift, and go to state 15

    $default  reduce using rule 10 (VARIABLE1)


state 22

    9 VARIABLE1: idf virgul VARIABLE1 .

    $default  reduce using rule 9 (VARIABLE1)


state 23

   11 TYPE1: reel .

    $default  reduce using rule 11 (TYPE1)


state 24

   12 TYPE1: entier .

    $default  reduce using rule 12 (TYPE1)


state 25

    2 DECLARATION: let VARIABLE1 deux_pnts TYPE1 . pnt_virgul

    pnt_virgul  shift, and go to state 41


state 26

    4 DECLARATION: constante idf deux_pnts TYPE1 . egal VALEUR

    egal  shift, and go to state 42


state 27

   15 INSTRUCTIONS: idf . AFFECTATION_NOR INSTRUCTIONS
   16             | idf . AFFECTATION_TAB INSTRUCTIONS

    corechet_ouvr  shift, and go to state 43
    affect         shift, and go to state 44

    AFFECTATION_TAB  go to state 45
    AFFECTATION_NOR  go to state 46


state 28

   41 CONDITION: if_cond . parenthese_ouvr EXPRESSION_COND parenthese_ferm then accolade_ouvr INSTRUCTIONS accolade_ferm SINON

    parenthese_ouvr  shift, and go to state 47


state 29

   35 INPUT: lire . parenthese_ouvr idf parenthese_ferm pnt_virgul

    parenthese_ouvr  shift, and go to state 48


state 30

   36 OUTPUT: output . parenthese_ouvr DANS_OUTPUT parenthese_ferm pnt_virgul

    parenthese_ouvr  shift, and go to state 49


state 31

   54 LOOP_FOR: boucle_for . idf from entier_pos to entier_pos step entier_pos accolade_ouvr INSTRUCTIONS accolade_ferm

    idf  shift, and go to state 50


state 32

   53 LOOP_DO: boucle_do . accolade_ouvr INSTRUCTIONS accolade_ferm boucle_while parenthese_ouvr EXPRESSION_COND parenthese_ferm pnt_virgul

    accolade_ouvr  shift, and go to state 51


state 33

    1 DEBUT: MainPrgm idf pnt_virgul var DECLARATION BeginPg accolade_ouvr INSTRUCTIONS . accolade_ferm EndPg pnt_virgul

    accolade_ferm  shift, and go to state 52


state 34

   17 INSTRUCTIONS: INPUT . INSTRUCTIONS

    idf         shift, and go to state 27
    if_cond     shift, and go to state 28
    lire        shift, and go to state 29
    output      shift, and go to state 30
    boucle_for  shift, and go to state 31
    boucle_do   shift, and go to state 32

    $default  reduce using rule 14 (INSTRUCTIONS)

    INSTRUCTIONS  go to state 53
    INPUT         go to state 34
    OUTPUT        go to state 35
    CONDITION     go to state 36
    LOOP_DO       go to state 37
    LOOP_FOR      go to state 38


state 35

   18 INSTRUCTIONS: OUTPUT . INSTRUCTIONS

    idf         shift, and go to state 27
    if_cond     shift, and go to state 28
    lire        shift, and go to state 29
    output      shift, and go to state 30
    boucle_for  shift, and go to state 31
    boucle_do   shift, and go to state 32

    $default  reduce using rule 14 (INSTRUCTIONS)

    INSTRUCTIONS  go to state 54
    INPUT         go to state 34
    OUTPUT        go to state 35
    CONDITION     go to state 36
    LOOP_DO       go to state 37
    LOOP_FOR      go to state 38


state 36

   19 INSTRUCTIONS: CONDITION . INSTRUCTIONS

    idf         shift, and go to state 27
    if_cond     shift, and go to state 28
    lire        shift, and go to state 29
    output      shift, and go to state 30
    boucle_for  shift, and go to state 31
    boucle_do   shift, and go to state 32

    $default  reduce using rule 14 (INSTRUCTIONS)

    INSTRUCTIONS  go to state 55
    INPUT         go to state 34
    OUTPUT        go to state 35
    CONDITION     go to state 36
    LOOP_DO       go to state 37
    LOOP_FOR      go to state 38


state 37

   20 INSTRUCTIONS: LOOP_DO . INSTRUCTIONS

    idf         shift, and go to state 27
    if_cond     shift, and go to state 28
    lire        shift, and go to state 29
    output      shift, and go to state 30
    boucle_for  shift, and go to state 31
    boucle_do   shift, and go to state 32

    $default  reduce using rule 14 (INSTRUCTIONS)

    INSTRUCTIONS  go to state 56
    INPUT         go to state 34
    OUTPUT        go to state 35
    CONDITION     go to state 36
    LOOP_DO       go to state 37
    LOOP_FOR      go to state 38


state 38

   21 INSTRUCTIONS: LOOP_FOR . INSTRUCTIONS

    idf         shift, and go to state 27
    if_cond     shift, and go to state 28
    lire        shift, and go to state 29
    output      shift, and go to state 30
    boucle_for  shift, and go to state 31
    boucle_do   shift, and go to state 32

    $default  reduce using rule 14 (INSTRUCTIONS)

    INSTRUCTIONS  go to state 57
    INPUT         go to state 34
    OUTPUT        go to state 35
    CONDITION     go to state 36
    LOOP_DO       go to state 37
    LOOP_FOR      go to state 38


state 39

   13 TYPE2: corechet_ouvr TYPE1 . pnt_virgul entier_pos corechet_ferm pnt_virgul

    pnt_virgul  shift, and go to state 58


state 40

    3 DECLARATION: let idf deux_pnts TYPE2 pnt_virgul .

    $default  reduce using rule 3 (DECLARATION)


state 41

    2 DECLARATION: let VARIABLE1 deux_pnts TYPE1 pnt_virgul .

    $default  reduce using rule 2 (DECLARATION)


state 42

    4 DECLARATION: constante idf deux_pnts TYPE1 egal . VALEUR

    entier_pos  shift, and go to state 59
    entier_neg  shift, and go to state 60
    reel_pos    shift, and go to state 61
    reel_neg    shift, and go to state 62

    VALEUR  go to state 63


state 43

   22 AFFECTATION_TAB: corechet_ouvr . entier_pos corechet_ferm AFFECTATION_NOR

    entier_pos  shift, and go to state 64


state 44

   23 AFFECTATION_NOR: affect . EXPRESSION pnt_virgul

    idf              shift, and go to state 65
    entier_pos       shift, and go to state 59
    entier_neg       shift, and go to state 60
    reel_pos         shift, and go to state 61
    reel_neg         shift, and go to state 62
    parenthese_ouvr  shift, and go to state 66
    neg              shift, and go to state 67

    VALEUR      go to state 68
    EXPRESSION  go to state 69
    OPERAND     go to state 70


state 45

   16 INSTRUCTIONS: idf AFFECTATION_TAB . INSTRUCTIONS

    idf         shift, and go to state 27
    if_cond     shift, and go to state 28
    lire        shift, and go to state 29
    output      shift, and go to state 30
    boucle_for  shift, and go to state 31
    boucle_do   shift, and go to state 32

    $default  reduce using rule 14 (INSTRUCTIONS)

    INSTRUCTIONS  go to state 71
    INPUT         go to state 34
    OUTPUT        go to state 35
    CONDITION     go to state 36
    LOOP_DO       go to state 37
    LOOP_FOR      go to state 38


state 46

   15 INSTRUCTIONS: idf AFFECTATION_NOR . INSTRUCTIONS

    idf         shift, and go to state 27
    if_cond     shift, and go to state 28
    lire        shift, and go to state 29
    output      shift, and go to state 30
    boucle_for  shift, and go to state 31
    boucle_do   shift, and go to state 32

    $default  reduce using rule 14 (INSTRUCTIONS)

    INSTRUCTIONS  go to state 72
    INPUT         go to state 34
    OUTPUT        go to state 35
    CONDITION     go to state 36
    LOOP_DO       go to state 37
    LOOP_FOR      go to state 38


state 47

   41 CONDITION: if_cond parenthese_ouvr . EXPRESSION_COND parenthese_ferm then accolade_ouvr INSTRUCTIONS accolade_ferm SINON

    idf         shift, and go to state 65
    entier_pos  shift, and go to state 59
    entier_neg  shift, and go to state 60
    reel_pos    shift, and go to state 61
    reel_neg    shift, and go to state 62
    neg         shift, and go to state 67

    VALEUR           go to state 73
    OPERAND          go to state 74
    EXPRESSION_COND  go to state 75


state 48

   35 INPUT: lire parenthese_ouvr . idf parenthese_ferm pnt_virgul

    idf  shift, and go to state 76


state 49

   36 OUTPUT: output parenthese_ouvr . DANS_OUTPUT parenthese_ferm pnt_virgul

    idf     shift, and go to state 77
    chaine  shift, and go to state 78

    DANS_OUTPUT  go to state 79


state 50

   54 LOOP_FOR: boucle_for idf . from entier_pos to entier_pos step entier_pos accolade_ouvr INSTRUCTIONS accolade_ferm

    from  shift, and go to state 80


state 51

   53 LOOP_DO: boucle_do accolade_ouvr . INSTRUCTIONS accolade_ferm boucle_while parenthese_ouvr EXPRESSION_COND parenthese_ferm pnt_virgul

    idf         shift, and go to state 27
    if_cond     shift, and go to state 28
    lire        shift, and go to state 29
    output      shift, and go to state 30
    boucle_for  shift, and go to state 31
    boucle_do   shift, and go to state 32

    $default  reduce using rule 14 (INSTRUCTIONS)

    INSTRUCTIONS  go to state 81
    INPUT         go to state 34
    OUTPUT        go to state 35
    CONDITION     go to state 36
    LOOP_DO       go to state 37
    LOOP_FOR      go to state 38


state 52

    1 DEBUT: MainPrgm idf pnt_virgul var DECLARATION BeginPg accolade_ouvr INSTRUCTIONS accolade_ferm . EndPg pnt_virgul

    EndPg  shift, and go to state 82


state 53

   17 INSTRUCTIONS: INPUT INSTRUCTIONS .

    $default  reduce using rule 17 (INSTRUCTIONS)


state 54

   18 INSTRUCTIONS: OUTPUT INSTRUCTIONS .

    $default  reduce using rule 18 (INSTRUCTIONS)


state 55

   19 INSTRUCTIONS: CONDITION INSTRUCTIONS .

    $default  reduce using rule 19 (INSTRUCTIONS)


state 56

   20 INSTRUCTIONS: LOOP_DO INSTRUCTIONS .

    $default  reduce using rule 20 (INSTRUCTIONS)


state 57

   21 INSTRUCTIONS: LOOP_FOR INSTRUCTIONS .

    $default  reduce using rule 21 (INSTRUCTIONS)


state 58

   13 TYPE2: corechet_ouvr TYPE1 pnt_virgul . entier_pos corechet_ferm pnt_virgul

    entier_pos  shift, and go to state 83


state 59

    5 VALEUR: entier_pos .

    $default  reduce using rule 5 (VALEUR)


state 60

    6 VALEUR: entier_neg .

    $default  reduce using rule 6 (VALEUR)


state 61

    7 VALEUR: reel_pos .

    $default  reduce using rule 7 (VALEUR)


state 62

    8 VALEUR: reel_neg .

    $default  reduce using rule 8 (VALEUR)


state 63

    4 DECLARATION: constante idf deux_pnts TYPE1 egal VALEUR .

    $default  reduce using rule 4 (DECLARATION)


state 64

   22 AFFECTATION_TAB: corechet_ouvr entier_pos . corechet_ferm AFFECTATION_NOR

    corechet_ferm  shift, and go to state 84


state 65

   28 OPERAND: idf .

    $default  reduce using rule 28 (OPERAND)


state 66

   24 EXPRESSION: parenthese_ouvr . EXPRESSION parenthese_ferm

    idf              shift, and go to state 65
    entier_pos       shift, and go to state 59
    entier_neg       shift, and go to state 60
    reel_pos         shift, and go to state 61
    reel_neg         shift, and go to state 62
    parenthese_ouvr  shift, and go to state 66
    neg              shift, and go to state 67

    VALEUR      go to state 68
    EXPRESSION  go to state 85
    OPERAND     go to state 70


state 67

   30 OPERAND: neg . OPERAND

    idf         shift, and go to state 65
    entier_pos  shift, and go to state 59
    entier_neg  shift, and go to state 60
    reel_pos    shift, and go to state 61
    reel_neg    shift, and go to state 62
    neg         shift, and go to state 67

    VALEUR   go to state 73
    OPERAND  go to state 86


state 68

   27 EXPRESSION: VALEUR .
   29 OPERAND: VALEUR .

    pnt_virgul       reduce using rule 27 (EXPRESSION)
    pnt_virgul       [reduce using rule 29 (OPERAND)]
    parenthese_ferm  reduce using rule 27 (EXPRESSION)
    parenthese_ferm  [reduce using rule 29 (OPERAND)]
    add              reduce using rule 27 (EXPRESSION)
    add              [reduce using rule 29 (OPERAND)]
    soustract        reduce using rule 27 (EXPRESSION)
    soustract        [reduce using rule 29 (OPERAND)]
    division         reduce using rule 27 (EXPRESSION)
    division         [reduce using rule 29 (OPERAND)]
    multipl          reduce using rule 27 (EXPRESSION)
    multipl          [reduce using rule 29 (OPERAND)]
    $default         reduce using rule 27 (EXPRESSION)


state 69

   23 AFFECTATION_NOR: affect EXPRESSION . pnt_virgul
   25 EXPRESSION: EXPRESSION . OPERATEUR_ARITHM EXPRESSION

    pnt_virgul  shift, and go to state 87
    add         shift, and go to state 88
    soustract   shift, and go to state 89
    division    shift, and go to state 90
    multipl     shift, and go to state 91

    OPERATEUR_ARITHM  go to state 92


state 70

   26 EXPRESSION: OPERAND .

    $default  reduce using rule 26 (EXPRESSION)


state 71

   16 INSTRUCTIONS: idf AFFECTATION_TAB INSTRUCTIONS .

    $default  reduce using rule 16 (INSTRUCTIONS)


state 72

   15 INSTRUCTIONS: idf AFFECTATION_NOR INSTRUCTIONS .

    $default  reduce using rule 15 (INSTRUCTIONS)


state 73

   29 OPERAND: VALEUR .

    $default  reduce using rule 29 (OPERAND)


state 74

   44 EXPRESSION_COND: OPERAND . OPERATEUR_COND OPERAND

    inf          shift, and go to state 93
    sup          shift, and go to state 94
    inf_ou_egal  shift, and go to state 95
    sup_ou_egal  shift, and go to state 96
    diff         shift, and go to state 97
    identiq      shift, and go to state 98

    OPERATEUR_COND  go to state 99


state 75

   41 CONDITION: if_cond parenthese_ouvr EXPRESSION_COND . parenthese_ferm then accolade_ouvr INSTRUCTIONS accolade_ferm SINON
   45 EXPRESSION_COND: EXPRESSION_COND . and EXPRESSION_COND
   46                | EXPRESSION_COND . or EXPRESSION_COND

    parenthese_ferm  shift, and go to state 100
    and              shift, and go to state 101
    or               shift, and go to state 102


state 76

   35 INPUT: lire parenthese_ouvr idf . parenthese_ferm pnt_virgul

    parenthese_ferm  shift, and go to state 103


state 77

   38 DANS_OUTPUT: idf .
   40            | idf . virgul DANS_OUTPUT

    virgul  shift, and go to state 104

    $default  reduce using rule 38 (DANS_OUTPUT)


state 78

   37 DANS_OUTPUT: chaine .
   39            | chaine . virgul DANS_OUTPUT

    virgul  shift, and go to state 105

    $default  reduce using rule 37 (DANS_OUTPUT)


state 79

   36 OUTPUT: output parenthese_ouvr DANS_OUTPUT . parenthese_ferm pnt_virgul

    parenthese_ferm  shift, and go to state 106


state 80

   54 LOOP_FOR: boucle_for idf from . entier_pos to entier_pos step entier_pos accolade_ouvr INSTRUCTIONS accolade_ferm

    entier_pos  shift, and go to state 107


state 81

   53 LOOP_DO: boucle_do accolade_ouvr INSTRUCTIONS . accolade_ferm boucle_while parenthese_ouvr EXPRESSION_COND parenthese_ferm pnt_virgul

    accolade_ferm  shift, and go to state 108


state 82

    1 DEBUT: MainPrgm idf pnt_virgul var DECLARATION BeginPg accolade_ouvr INSTRUCTIONS accolade_ferm EndPg . pnt_virgul

    pnt_virgul  shift, and go to state 109


state 83

   13 TYPE2: corechet_ouvr TYPE1 pnt_virgul entier_pos . corechet_ferm pnt_virgul

    corechet_ferm  shift, and go to state 110


state 84

   22 AFFECTATION_TAB: corechet_ouvr entier_pos corechet_ferm . AFFECTATION_NOR

    affect  shift, and go to state 44

    AFFECTATION_NOR  go to state 111


state 85

   24 EXPRESSION: parenthese_ouvr EXPRESSION . parenthese_ferm
   25           | EXPRESSION . OPERATEUR_ARITHM EXPRESSION

    parenthese_ferm  shift, and go to state 112
    add              shift, and go to state 88
    soustract        shift, and go to state 89
    division         shift, and go to state 90
    multipl          shift, and go to state 91

    OPERATEUR_ARITHM  go to state 92


state 86

   30 OPERAND: neg OPERAND .

    $default  reduce using rule 30 (OPERAND)


state 87

   23 AFFECTATION_NOR: affect EXPRESSION pnt_virgul .

    $default  reduce using rule 23 (AFFECTATION_NOR)


state 88

   31 OPERATEUR_ARITHM: add .

    $default  reduce using rule 31 (OPERATEUR_ARITHM)


state 89

   32 OPERATEUR_ARITHM: soustract .

    $default  reduce using rule 32 (OPERATEUR_ARITHM)


state 90

   33 OPERATEUR_ARITHM: division .

    $default  reduce using rule 33 (OPERATEUR_ARITHM)


state 91

   34 OPERATEUR_ARITHM: multipl .

    $default  reduce using rule 34 (OPERATEUR_ARITHM)


state 92

   25 EXPRESSION: EXPRESSION OPERATEUR_ARITHM . EXPRESSION

    idf              shift, and go to state 65
    entier_pos       shift, and go to state 59
    entier_neg       shift, and go to state 60
    reel_pos         shift, and go to state 61
    reel_neg         shift, and go to state 62
    parenthese_ouvr  shift, and go to state 66
    neg              shift, and go to state 67

    VALEUR      go to state 68
    EXPRESSION  go to state 113
    OPERAND     go to state 70


state 93

   47 OPERATEUR_COND: inf .

    $default  reduce using rule 47 (OPERATEUR_COND)


state 94

   48 OPERATEUR_COND: sup .

    $default  reduce using rule 48 (OPERATEUR_COND)


state 95

   49 OPERATEUR_COND: inf_ou_egal .

    $default  reduce using rule 49 (OPERATEUR_COND)


state 96

   50 OPERATEUR_COND: sup_ou_egal .

    $default  reduce using rule 50 (OPERATEUR_COND)


state 97

   52 OPERATEUR_COND: diff .

    $default  reduce using rule 52 (OPERATEUR_COND)


state 98

   51 OPERATEUR_COND: identiq .

    $default  reduce using rule 51 (OPERATEUR_COND)


state 99

   44 EXPRESSION_COND: OPERAND OPERATEUR_COND . OPERAND

    idf         shift, and go to state 65
    entier_pos  shift, and go to state 59
    entier_neg  shift, and go to state 60
    reel_pos    shift, and go to state 61
    reel_neg    shift, and go to state 62
    neg         shift, and go to state 67

    VALEUR   go to state 73
    OPERAND  go to state 114


state 100

   41 CONDITION: if_cond parenthese_ouvr EXPRESSION_COND parenthese_ferm . then accolade_ouvr INSTRUCTIONS accolade_ferm SINON

    then  shift, and go to state 115


state 101

   45 EXPRESSION_COND: EXPRESSION_COND and . EXPRESSION_COND

    idf         shift, and go to state 65
    entier_pos  shift, and go to state 59
    entier_neg  shift, and go to state 60
    reel_pos    shift, and go to state 61
    reel_neg    shift, and go to state 62
    neg         shift, and go to state 67

    VALEUR           go to state 73
    OPERAND          go to state 74
    EXPRESSION_COND  go to state 116


state 102

   46 EXPRESSION_COND: EXPRESSION_COND or . EXPRESSION_COND

    idf         shift, and go to state 65
    entier_pos  shift, and go to state 59
    entier_neg  shift, and go to state 60
    reel_pos    shift, and go to state 61
    reel_neg    shift, and go to state 62
    neg         shift, and go to state 67

    VALEUR           go to state 73
    OPERAND          go to state 74
    EXPRESSION_COND  go to state 117


state 103

   35 INPUT: lire parenthese_ouvr idf parenthese_ferm . pnt_virgul

    pnt_virgul  shift, and go to state 118


state 104

   40 DANS_OUTPUT: idf virgul . DANS_OUTPUT

    idf     shift, and go to state 77
    chaine  shift, and go to state 78

    DANS_OUTPUT  go to state 119


state 105

   39 DANS_OUTPUT: chaine virgul . DANS_OUTPUT

    idf     shift, and go to state 77
    chaine  shift, and go to state 78

    DANS_OUTPUT  go to state 120


state 106

   36 OUTPUT: output parenthese_ouvr DANS_OUTPUT parenthese_ferm . pnt_virgul

    pnt_virgul  shift, and go to state 121


state 107

   54 LOOP_FOR: boucle_for idf from entier_pos . to entier_pos step entier_pos accolade_ouvr INSTRUCTIONS accolade_ferm

    to  shift, and go to state 122


state 108

   53 LOOP_DO: boucle_do accolade_ouvr INSTRUCTIONS accolade_ferm . boucle_while parenthese_ouvr EXPRESSION_COND parenthese_ferm pnt_virgul

    boucle_while  shift, and go to state 123


state 109

    1 DEBUT: MainPrgm idf pnt_virgul var DECLARATION BeginPg accolade_ouvr INSTRUCTIONS accolade_ferm EndPg pnt_virgul .

    $default  reduce using rule 1 (DEBUT)


state 110

   13 TYPE2: corechet_ouvr TYPE1 pnt_virgul entier_pos corechet_ferm . pnt_virgul

    pnt_virgul  shift, and go to state 124


state 111

   22 AFFECTATION_TAB: corechet_ouvr entier_pos corechet_ferm AFFECTATION_NOR .

    $default  reduce using rule 22 (AFFECTATION_TAB)


state 112

   24 EXPRESSION: parenthese_ouvr EXPRESSION parenthese_ferm .

    $default  reduce using rule 24 (EXPRESSION)


state 113

   25 EXPRESSION: EXPRESSION . OPERATEUR_ARITHM EXPRESSION
   25           | EXPRESSION OPERATEUR_ARITHM EXPRESSION .

    add        shift, and go to state 88
    soustract  shift, and go to state 89
    division   shift, and go to state 90
    multipl    shift, and go to state 91

    add        [reduce using rule 25 (EXPRESSION)]
    soustract  [reduce using rule 25 (EXPRESSION)]
    division   [reduce using rule 25 (EXPRESSION)]
    multipl    [reduce using rule 25 (EXPRESSION)]
    $default   reduce using rule 25 (EXPRESSION)

    OPERATEUR_ARITHM  go to state 92


state 114

   44 EXPRESSION_COND: OPERAND OPERATEUR_COND OPERAND .

    $default  reduce using rule 44 (EXPRESSION_COND)


state 115

   41 CONDITION: if_cond parenthese_ouvr EXPRESSION_COND parenthese_ferm then . accolade_ouvr INSTRUCTIONS accolade_ferm SINON

    accolade_ouvr  shift, and go to state 125


state 116

   45 EXPRESSION_COND: EXPRESSION_COND . and EXPRESSION_COND
   45                | EXPRESSION_COND and EXPRESSION_COND .
   46                | EXPRESSION_COND . or EXPRESSION_COND

    $default  reduce using rule 45 (EXPRESSION_COND)


state 117

   45 EXPRESSION_COND: EXPRESSION_COND . and EXPRESSION_COND
   46                | EXPRESSION_COND . or EXPRESSION_COND
   46                | EXPRESSION_COND or EXPRESSION_COND .

    and  shift, and go to state 101

    $default  reduce using rule 46 (EXPRESSION_COND)


state 118

   35 INPUT: lire parenthese_ouvr idf parenthese_ferm pnt_virgul .

    $default  reduce using rule 35 (INPUT)


state 119

   40 DANS_OUTPUT: idf virgul DANS_OUTPUT .

    $default  reduce using rule 40 (DANS_OUTPUT)


state 120

   39 DANS_OUTPUT: chaine virgul DANS_OUTPUT .

    $default  reduce using rule 39 (DANS_OUTPUT)


state 121

   36 OUTPUT: output parenthese_ouvr DANS_OUTPUT parenthese_ferm pnt_virgul .

    $default  reduce using rule 36 (OUTPUT)


state 122

   54 LOOP_FOR: boucle_for idf from entier_pos to . entier_pos step entier_pos accolade_ouvr INSTRUCTIONS accolade_ferm

    entier_pos  shift, and go to state 126


state 123

   53 LOOP_DO: boucle_do accolade_ouvr INSTRUCTIONS accolade_ferm boucle_while . parenthese_ouvr EXPRESSION_COND parenthese_ferm pnt_virgul

    parenthese_ouvr  shift, and go to state 127


state 124

   13 TYPE2: corechet_ouvr TYPE1 pnt_virgul entier_pos corechet_ferm pnt_virgul .

    $default  reduce using rule 13 (TYPE2)


state 125

   41 CONDITION: if_cond parenthese_ouvr EXPRESSION_COND parenthese_ferm then accolade_ouvr . INSTRUCTIONS accolade_ferm SINON

    idf         shift, and go to state 27
    if_cond     shift, and go to state 28
    lire        shift, and go to state 29
    output      shift, and go to state 30
    boucle_for  shift, and go to state 31
    boucle_do   shift, and go to state 32

    $default  reduce using rule 14 (INSTRUCTIONS)

    INSTRUCTIONS  go to state 128
    INPUT         go to state 34
    OUTPUT        go to state 35
    CONDITION     go to state 36
    LOOP_DO       go to state 37
    LOOP_FOR      go to state 38


state 126

   54 LOOP_FOR: boucle_for idf from entier_pos to entier_pos . step entier_pos accolade_ouvr INSTRUCTIONS accolade_ferm

    step  shift, and go to state 129


state 127

   53 LOOP_DO: boucle_do accolade_ouvr INSTRUCTIONS accolade_ferm boucle_while parenthese_ouvr . EXPRESSION_COND parenthese_ferm pnt_virgul

    idf         shift, and go to state 65
    entier_pos  shift, and go to state 59
    entier_neg  shift, and go to state 60
    reel_pos    shift, and go to state 61
    reel_neg    shift, and go to state 62
    neg         shift, and go to state 67

    VALEUR           go to state 73
    OPERAND          go to state 74
    EXPRESSION_COND  go to state 130


state 128

   41 CONDITION: if_cond parenthese_ouvr EXPRESSION_COND parenthese_ferm then accolade_ouvr INSTRUCTIONS . accolade_ferm SINON

    accolade_ferm  shift, and go to state 131


state 129

   54 LOOP_FOR: boucle_for idf from entier_pos to entier_pos step . entier_pos accolade_ouvr INSTRUCTIONS accolade_ferm

    entier_pos  shift, and go to state 132


state 130

   45 EXPRESSION_COND: EXPRESSION_COND . and EXPRESSION_COND
   46                | EXPRESSION_COND . or EXPRESSION_COND
   53 LOOP_DO: boucle_do accolade_ouvr INSTRUCTIONS accolade_ferm boucle_while parenthese_ouvr EXPRESSION_COND . parenthese_ferm pnt_virgul

    parenthese_ferm  shift, and go to state 133
    and              shift, and go to state 101
    or               shift, and go to state 102


state 131

   41 CONDITION: if_cond parenthese_ouvr EXPRESSION_COND parenthese_ferm then accolade_ouvr INSTRUCTIONS accolade_ferm . SINON

    else_cond  shift, and go to state 134

    $default  reduce using rule 43 (SINON)

    SINON  go to state 135


state 132

   54 LOOP_FOR: boucle_for idf from entier_pos to entier_pos step entier_pos . accolade_ouvr INSTRUCTIONS accolade_ferm

    accolade_ouvr  shift, and go to state 136


state 133

   53 LOOP_DO: boucle_do accolade_ouvr INSTRUCTIONS accolade_ferm boucle_while parenthese_ouvr EXPRESSION_COND parenthese_ferm . pnt_virgul

    pnt_virgul  shift, and go to state 137


state 134

   42 SINON: else_cond . accolade_ouvr INSTRUCTIONS accolade_ferm

    accolade_ouvr  shift, and go to state 138


state 135

   41 CONDITION: if_cond parenthese_ouvr EXPRESSION_COND parenthese_ferm then accolade_ouvr INSTRUCTIONS accolade_ferm SINON .

    $default  reduce using rule 41 (CONDITION)


state 136

   54 LOOP_FOR: boucle_for idf from entier_pos to entier_pos step entier_pos accolade_ouvr . INSTRUCTIONS accolade_ferm

    idf         shift, and go to state 27
    if_cond     shift, and go to state 28
    lire        shift, and go to state 29
    output      shift, and go to state 30
    boucle_for  shift, and go to state 31
    boucle_do   shift, and go to state 32

    $default  reduce using rule 14 (INSTRUCTIONS)

    INSTRUCTIONS  go to state 139
    INPUT         go to state 34
    OUTPUT        go to state 35
    CONDITION     go to state 36
    LOOP_DO       go to state 37
    LOOP_FOR      go to state 38


state 137

   53 LOOP_DO: boucle_do accolade_ouvr INSTRUCTIONS accolade_ferm boucle_while parenthese_ouvr EXPRESSION_COND parenthese_ferm pnt_virgul .

    $default  reduce using rule 53 (LOOP_DO)


state 138

   42 SINON: else_cond accolade_ouvr . INSTRUCTIONS accolade_ferm

    idf         shift, and go to state 27
    if_cond     shift, and go to state 28
    lire        shift, and go to state 29
    output      shift, and go to state 30
    boucle_for  shift, and go to state 31
    boucle_do   shift, and go to state 32

    $default  reduce using rule 14 (INSTRUCTIONS)

    INSTRUCTIONS  go to state 140
    INPUT         go to state 34
    OUTPUT        go to state 35
    CONDITION     go to state 36
    LOOP_DO       go to state 37
    LOOP_FOR      go to state 38


state 139

   54 LOOP_FOR: boucle_for idf from entier_pos to entier_pos step entier_pos accolade_ouvr INSTRUCTIONS . accolade_ferm

    accolade_ferm  shift, and go to state 141


state 140

   42 SINON: else_cond accolade_ouvr INSTRUCTIONS . accolade_ferm

    accolade_ferm  shift, and go to state 142


state 141

   54 LOOP_FOR: boucle_for idf from entier_pos to entier_pos step entier_pos accolade_ouvr INSTRUCTIONS accolade_ferm .

    $default  reduce using rule 54 (LOOP_FOR)


state 142

   42 SINON: else_cond accolade_ouvr INSTRUCTIONS accolade_ferm .

    $default  reduce using rule 42 (SINON)
